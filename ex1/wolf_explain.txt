1. Why we get non-termination?
Because prolog will do the same thing again when we reach a state that we encountered before(there is a cycle in the path).

2. What happened when we add isa_list(Moves)?

From some results, we can see the changes of enumeration when we added isa_list, as the lab manual says,
for example, if we query: isa_list(Moves), puzzlestate_moves(wfgc(south, south, south, south), Moves).
we can find that we will get all result lists length=2 before get any length>2 result lists, however, 
if we query: puzzlestate_moves(wfgc(south, south, south, south), Moves). 
we will get lists length=2,4,6,... and consist of only "goat".
So when we add isa_list(Moves), the enumerating strategy for Moves changes, and we will no longer get stuck
with only one variable(which makes no progress).

The reason why this happened is that when we use puzzlestate_moves, it will carry variable Moves into
recurrsive procedure and only get the result return when it reach empty, however, it meet a cycle before it
reach empty, so the recurrsive will last forever until out of stack.
On the other hand, when we added isa_list, we actually first enumerate a list Moves, and then check it 
with puzzlestate_moves to see whether it is correct or not, and this kind of queries can reach empty
during the recurrsive procedure, and will return result if the current enumeration of Moves is true.
The consequence can be seen as the enumeration strategy becomes fair as the manual says.

3. Why always terminated?
Because we add a accumulator that ensures we will not reach a state that we encounetered before,
and if there are no duplicate states(no cycles), there will be finite states in total,
therefore, prolog can always try all possibilities and reach termination.